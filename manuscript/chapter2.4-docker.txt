## 2.4 Docker

Once upon a time, there was a person working in operations who had to setup a new services by logging-in to a remote server, and manually installing all the necessary software required to support the service being run on the server. This was time consuming, and error prone, and as time passed, the person decided to write a script to install all of the necessary software packages, which freed up their time to focus on Zork. But with any success, there follows challenge. In this case the challenge involved developers wanting to upgrade their service, which inevitably required an update to the software requirements on the server. The first time this request was made, the person making the upgrade was able to work out a fine balance of software versions, and everyone was happy. By the tenth upgrade, the person was losing their mind trying to strike a balance between package versions, and services running on the machine that conflicted with the developers service. The person had a brilliant idea to split each service onto their own machine, that was dedicated to only one service. This worked until the project grew beyond a capacity that the company could afford to maintain. The company told the person to save money and stop buying servers. What could the person do but create virtual servers on one machine, and let them communicate over network channels, and shared filesystems. Now most services were very lightweight, and didn't really depend on all of the built in services of the operating system in the virtual server. The person thought it would be very nice to use a shared version of the operating system, and only virtualize the unique parts of the service in the virtual server, this would allow a user to run many more services on a single machine, and allow each virtual server to perform it's one task with it's one set of dependencies, thus saving money for the company, and eventually leading to the person becoming the hero of the day.

This is Docker. 

