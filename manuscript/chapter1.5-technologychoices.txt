## 1.5 Technology Choices

There are so many choices for technology today, that no matter which you choose, you run the risk of offending someone who has strong opinions one way or another. Generally, in my opinion, it's better to stay somewhat technology agnostic, and use the tools that are best for the job at hand, but every project requires some choice to be made. 

I could have chosen a full Javascript stack using NodeJS and React, however I chose Go because of some interesting features of the language that are not present in Node. Go is a statically typed, compiled language with memory safety, garbage collection, and concurrency built-in. Go was originally designed by Google for rapid scalability and concurrency, and has concepts such as Goroutines that allow for easy parallelism, which in turn allows applications to scale without having to worry about building the sometimes complicated mechanisms to support it. There's nothing wrong with NodeJS as a backend solution, however, Go provides a single ecosystem with tools that can be used to manage packages, run function tests, benchmark an application, format the source code, and produce documentation. We'll discuss these in more detail in the section dedicated to Go.  

One of the reasons I chose React for the front end because of the concept of "learn once, write anywhere." This means that using the same basic development philosophy, abstractions, and constructs, we can rapidly build interfaces for the desktop browser, desktop applications, mobile web, and mobile applications for iOS and Android devices. In a lot of cases, the same code can be reused across all platforms. I could have chosen to use native tools for each of the platforms, however, the time to learn new languages, and concepts for the front end on each of the devices would eliminate the concept of rapid development. Again, there's absolutely nothing wrong with languages like Swift, or Java for devloping in the native device platform, however the APIs, and concepts differ enough that productivity suffers, and there's no reusability across platforms, therefore, the ability to push an application to production in a reasonable amount of time becomes much more difficult, especially with small teams. There will definitely be cases where knowing Swift and Java will be helpful to develop custom bridges from React to the native device, however that's beyond the scope of this book.   
